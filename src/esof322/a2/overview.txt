Todd Beckman
Dylan Hills
Kalvyn Lu
Luke O'Neill
Luke Welna

Assignment 2
============

Overall Description of Changes
------------------------------
    The provided code was an collosal nightmare of spaces and tabs. The very
first change was to make all of the code fit a uniform format (4 space indent
and no tabs). This is the agreed-upon format that the group decided to use at
the start of the semester.
    The next change was to pull out the game's listener code into a separate
method so that it could later be modified to behave differently without
affecting the gameplay.
    A new InputListener class was made to interface between objects. The
caller to receive() waits for the caller of send(String message). The test of
this class was the button presses, which calls the model, which in turn sends
the appropriate character to the game. This communication system works in
both directions, so the game is also capable of sending messages with the model
on the receiving end.
    In order to assure that the InputListener functions properly, it must be
initialized and linked to both the game and the model before runtime. Thus,
the view invokes the model's startQuest method (which then invokes the game's)
AFTER initialization of both game and model are finished.
    The model had no way of knowing the current player's inventory and
location. In order to display the player's inventory, the Player variable is
now global. The corresponding getter method was also implemented. The previous
implementation of the GUI did not allow user input. This became a problem when
the player wanted to grab or drop an item and needed to choose which item to
grab or drop. A text box was implemented to fix this. The player can now input
a string into the text box and submit it to the model.
    The model now includes an instance of AdventureGameView. This way the view 
can be edited directly from the model.
    The enter() method in the CaveSite interface (and therefore Room, Door, 
and Wall) now returns a string. This string is displayed in the actionArea in 
the GUI. 
    The GUI now has an ActionArea that displays the action the player made. It 
also displays instructions for grabbing and dropping items.
    The UML was at this stage ready to be generated and so was generated.
    Among the final touches is a change in which the messages are printed
through printView and printAction methods which enforce the same messages in
both terminal and gui game modes while still updating the correct part of the
gui. Commenting, correcting typos, and final debugging touches finished off the
project.


Interesting Class Relationships, Design Approaches, and Troublesome Things
--------------------------------------------------------------------------

    One of the more interesting problems to solve about this project was 
forcing  the game, which is not hooked up to a GUI, to wait for the GUI's 
input instead  of terminal input. To solve this, a separate InputListener 
class was made. It forces the listening class (usually the game class) to 
sleep until a separate input thread (usually the model, triggered by the GUI) 
provides it with the input it was waiting for. This listener is a compact 
class that can be copied for use in future projects due to its simple, elegant 
stucture and its usefulness.
    In order for the classes to communicate correctly, it was necessary for 
the GUI and game to see and be seen by the model, but not with each other. 
However, since the program begins in the GUI, it is necessary to construct the
model from it (and the game from it, without the view knowing). Thus, the 
startQuest method needed to be called from the furthest out layer and fired to 
all other classes in the right order so that initialization worked properly.
    The design of the project was laid out in the specifications, so there were
no real issues with developing this. Keeping the blackboxing in mind led to a
very simple and efficient system that should run from the terminal or through 
the GUI, with the display differences being handled automatically.


Special Running Instructions
----------------------------
    This game supports text-based and graphical user interface. To run the
graphical user interface, run AdventureGameView.main. To run in the console, 
run AdventureGame.main. The game functions for both methods, but you will also
find that there is no redundant display.


Time Spent by each member
-------------------------
Todd Beckman- 3 hours
Luke Welna  - 5 minutes
Kalvyn Lu - 2 hours
Dylan Hills - 2 hours
Luke Oâ€™Neill - 1 hour


Git Logs (Descending)
--------

commit c72ecb36750e5740ebe16bcd2de354297e783c45
Author: Todd Beckman <toddbeckman1@gmail.com>
Date:   Mon Sep 28 14:33:42 2015 -0600

    updated overview.txt

commit 0d5bfefb798093f581ee6766b83387c771870fbd
Author: Todd Beckman <toddbeckman1@gmail.com>
Date:   Mon Sep 28 14:13:24 2015 -0600

    consisted printing, fixed minor errors, fixed typos, fixed comments

commit 7358dbb054942e33a81ca5153881b179cbd5515f
Author: Todd Beckman <toddbeckman1@gmail.com>
Date:   Mon Sep 28 13:43:18 2015 -0600

    met some specifications for the assignment

commit 40efedf036250be900db86e62021da769c518ccf
Author: Todd Beckman <toddbeckman1@gmail.com>
Date:   Sun Sep 27 22:26:53 2015 -0600

    moved class diagram and updated overview file

commit 722e54b3f39313f8f040dc40caa37eb03f820259
Author: Luke O'Neill <Athena@Lukes-MacBook-Pro.local>
Date:   Sun Sep 27 16:15:00 2015 -0600

    Updated overview.txt

commit f04b9bdf069d6f6d354712f6f5638846557ea8a7
Author: Luke O'Neill <Athena@Lukes-MacBook-Pro.local>
Date:   Sun Sep 27 16:02:04 2015 -0600

    created uml diagram

commit 789f303a8919d72eb5d2943c3e0776487f5eb41d
Author: dylanhills <dylanhills333@gmail.com>
Date:   Sun Sep 27 14:52:26 2015 -0600

    GUI now has an ActionArea that displays which action the player took.

commit bc97b543d48c9f279a366f9da5a050a19f447ea0
Author: dylanhills <dylanhills333@gmail.com>
Date:   Sun Sep 27 13:45:31 2015 -0600

    Room view is now displayed on the GUI

commit a2a23e8b894b5eb3e60e9cf5ca0ad1c4b27d1de4
Author: kalvyn-lu <kalvynlu@gmail.com>
Date:   Sat Sep 26 15:42:21 2015 -0700

    Comments and Overview updated

commit a923265c4f24b319d8ce75441dc29a0122d9de4e
Author: kalvyn-lu <kalvynlu@gmail.com>
Date:   Sat Sep 26 15:26:51 2015 -0700

    Dropping works

commit 8bda6d6200eb7e59893e4d8fdd13bb442756d853
Author: kalvyn-lu <kalvynlu@gmail.com>
Date:   Sat Sep 26 15:23:38 2015 -0700

    Gui now displays items in bag after grabbing

commit 2dafaa0c9e8cc164d974691ac51235525f482017
Author: kalvyn-lu <kalvynlu@gmail.com>
Date:   Sat Sep 26 14:53:40 2015 -0700

    grab done except for gui

commit 5361311d5bdccc7554a153233a04e806ec19d37d
Author: Todd Beckman <toddbeckman1@gmail.com>
Date:   Fri Sep 25 21:12:29 2015 -0600

    removed unnecessary parameter from the InputListener.recieve() method

commit 457ad8b62bb2bce642b805dd105da42f9a82e8ff
Author: Todd Beckman <toddbeckman1@gmail.com>
Date:   Fri Sep 25 21:09:59 2015 -0600

    updated overview.txt to contain first batch of commit data

commit d5d66a91ee0f3d458ad73c75455c8ab0296994b5
Author: Todd Beckman <toddbeckman1@gmail.com>
Date:   Fri Sep 25 20:59:30 2015 -0600

    prepared overview.txt

commit b59e1e21314060e4fd70ca335dd0e8dc141eab4c
Author: Todd Beckman <toddbeckman1@gmail.com>
Date:   Fri Sep 25 20:49:50 2015 -0600

    hooked directional input into gui

commit 2725c1cfd0da81fefa97e78396e6dfa2bcae6471
Author: Todd Beckman <toddbeckman1@gmail.com>
Date:   Fri Sep 25 19:50:53 2015 -0600

    centralized input methods to prepare for change in input

commit 03b00f8d154f1020c9bda4f6a55470f0aa5e69c4
Author: Todd Beckman <toddbeckman1@gmail.com>
Date:   Fri Sep 25 19:21:37 2015 -0600

    made text input code less ugly

commit 23ba61e5959a031d8809140561c81cf17ecf3456
Author: Luke Welna <lwelna@sofi.org>
Date:   Tue Sep 22 18:39:54 2015 -0600

    Format all of the awful code to be readable.
    
    Convert awful combination of tabs and spaces to just spaces

    Organize imports.

    Actually enforce a coding standard.
